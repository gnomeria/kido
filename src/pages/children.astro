---
import Layout from '../layouts/Layout.astro';
---

<Layout title="My Children - Kido">
  <div class="min-h-screen bg-base-200 py-8">
    <div class="container mx-auto px-4 max-w-4xl">
      <!-- Header -->
      <div class="flex justify-between items-center mb-8">
        <h1 class="text-3xl font-bold">My Children</h1>
        <div class="space-x-2">
          <a href="/add-child" class="btn btn-primary">Add Child</a>
          <a href="/" class="btn btn-outline">‚Üê Home</a>
        </div>
      </div>

      <!-- Children Grid -->
      <div id="children-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        <!-- Children cards will be populated here -->
      </div>

      <!-- No Children State -->
      <div id="no-children" class="hero min-h-96 hidden">
        <div class="hero-content text-center">
          <div class="max-w-md">
            <div class="text-9xl mb-4">üë∂</div>
            <h3 class="text-2xl font-bold">No children added yet</h3>
            <p class="py-6">Get started by adding your first child to begin tracking their growth.</p>
            <a href="/add-child" class="btn btn-primary btn-lg">Add Your First Child</a>
          </div>
        </div>
      </div>

      <!-- Recent Measurements -->
      <div id="recent-measurements" class="card bg-base-100 shadow-xl hidden">
        <div class="card-body">
          <h2 class="card-title">Recent Measurements</h2>
          <div id="recent-measurements-list">
            <!-- Recent measurements will be populated here -->
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Child Actions Modal -->
  <div id="child-modal" class="modal">
    <div class="modal-box">
      <h3 class="font-bold text-lg" id="modal-child-name">Child Actions</h3>
      <p class="py-4">What would you like to do?</p>
      <div class="modal-action">
        <button class="btn btn-outline" onclick="closeChildModal()">Cancel</button>
        <button class="btn btn-secondary" id="view-growth-btn">View Growth Chart</button>
        <button class="btn btn-primary" id="add-measurement-btn">Add Measurement</button>
      </div>
    </div>
  </div>

  <!-- Delete Child Modal -->
  <div id="delete-modal" class="modal">
    <div class="modal-box">
      <h3 class="font-bold text-lg">Delete Child</h3>
      <p class="py-4">Are you sure you want to delete this child and all their measurements? This action cannot be undone.</p>
      <div class="modal-action">
        <button class="btn btn-outline" onclick="closeDeleteModal()">Cancel</button>
        <button class="btn btn-error" id="confirm-delete">Delete</button>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Types
  interface Child {
    id: string;
    name: string;
    dateOfBirth: string;
    sex: 'male' | 'female';
    notes: string;
    createdAt: string;
  }

  interface Measurement {
    id: string;
    childName: string;
    dateOfBirth: string;
    measurementDate: string;
    sex: string;
    ageInDays: number;
    weight: number;
    height: number;
    headCircumference: number;
    notes: string;
    originalUnits: {
      weight: string;
      height: string;
      headCircumference: string;
    };
    createdAt: string;
  }

  // Load data from localStorage
  let children: Child[] = JSON.parse(localStorage.getItem('kido-children') || '[]');
  let measurements: Measurement[] = JSON.parse(localStorage.getItem('kido-measurements') || '[]');
  let selectedChildId = '';
  let childToDelete = '';

  document.addEventListener('DOMContentLoaded', function() {
    loadChildren();
    setupEventListeners();
  });

  function setupEventListeners() {
    const addMeasurementBtn = document.getElementById('add-measurement-btn') as HTMLButtonElement;
    const viewGrowthBtn = document.getElementById('view-growth-btn') as HTMLButtonElement;
    const confirmDeleteBtn = document.getElementById('confirm-delete') as HTMLButtonElement;

    if (addMeasurementBtn) {
      addMeasurementBtn.addEventListener('click', function() {
        addMeasurementForChild(selectedChildId);
      });
    }

    if (viewGrowthBtn) {
      viewGrowthBtn.addEventListener('click', function() {
        viewGrowthChart(selectedChildId);
      });
    }

    if (confirmDeleteBtn) {
      confirmDeleteBtn.addEventListener('click', function() {
        deleteChild(childToDelete);
        closeDeleteModal();
      });
    }
  }

  function loadChildren() {
    const grid = document.getElementById('children-grid')!;
    const noChildrenDiv = document.getElementById('no-children')!;
    const recentMeasurementsDiv = document.getElementById('recent-measurements')!;

    if (children.length === 0) {
      grid.classList.add('hidden');
      noChildrenDiv.classList.remove('hidden');
      recentMeasurementsDiv.classList.add('hidden');
      return;
    }

    noChildrenDiv.classList.add('hidden');
    grid.classList.remove('hidden');

    grid.innerHTML = children.map(child => {
      const age = calculateAge(child.dateOfBirth);
      const childMeasurements = measurements.filter(m => m.childName === child.name);
      const latestMeasurement = childMeasurements.length > 0 ? 
        childMeasurements.sort((a, b) => new Date(b.measurementDate).getTime() - new Date(a.measurementDate).getTime())[0] : null;

      return `
        <div class="card bg-base-100 shadow-xl hover:shadow-2xl transition-shadow cursor-pointer" onclick="showChildModal('${child.id}', '${child.name}')">
          <div class="card-body">
            <h2 class="card-title">
              ${child.name}
              <div class="badge badge-secondary">${child.sex}</div>
            </h2>
            <div class="stats stats-vertical shadow text-sm">
              <div class="stat">
                <div class="stat-title">Age</div>
                <div class="stat-value text-lg">${age}</div>
              </div>
              <div class="stat">
                <div class="stat-title">Measurements</div>
                <div class="stat-value text-lg">${childMeasurements.length}</div>
              </div>
              ${latestMeasurement ? `
                <div class="stat">
                  <div class="stat-title">Latest</div>
                  <div class="stat-desc">${new Date(latestMeasurement.measurementDate).toLocaleDateString()}</div>
                </div>
              ` : ''}
            </div>
            ${child.notes ? `
              <div class="alert alert-info">
                <span class="text-sm">${child.notes}</span>
              </div>
            ` : ''}
            <div class="card-actions justify-end">
              <button class="btn btn-sm btn-error btn-outline" onclick="event.stopPropagation(); showDeleteModal('${child.id}', '${child.name}')">
                Delete
              </button>
            </div>
          </div>
        </div>
      `;
    }).join('');

    // Show recent measurements if there are any
    loadRecentMeasurements();
  }

  function loadRecentMeasurements() {
    const recentMeasurementsDiv = document.getElementById('recent-measurements')!;
    const recentMeasurementsList = document.getElementById('recent-measurements-list')!;

    if (measurements.length === 0) {
      recentMeasurementsDiv.classList.add('hidden');
      return;
    }

    const recentMeasurements = measurements
      .sort((a, b) => new Date(b.measurementDate).getTime() - new Date(a.measurementDate).getTime())
      .slice(0, 5);

    recentMeasurementsDiv.classList.remove('hidden');
    recentMeasurementsList.innerHTML = `
      <div class="space-y-2">
        ${recentMeasurements.map(measurement => `
          <div class="alert">
            <div>
              <div class="font-bold">${measurement.childName}</div>
              <div class="text-xs opacity-75">${new Date(measurement.measurementDate).toLocaleDateString()}</div>
            </div>
            <div class="badge badge-outline">
              ${measurement.weight.toFixed(1)}kg ‚Ä¢ ${measurement.height.toFixed(1)}cm
            </div>
          </div>
        `).join('')}
      </div>
    `;
  }

  function calculateAge(dateOfBirth: string): string {
    const today = new Date();
    const birth = new Date(dateOfBirth);
    const ageInDays = Math.floor((today.getTime() - birth.getTime()) / (1000 * 60 * 60 * 24));

    if (ageInDays < 30) {
      return `${ageInDays} days`;
    } else if (ageInDays < 365) {
      const months = Math.floor(ageInDays / 30);
      const remainingDays = ageInDays % 30;
      return remainingDays > 0 ? `${months}m ${remainingDays}d` : `${months} months`;
    } else {
      const years = Math.floor(ageInDays / 365);
      const months = Math.floor((ageInDays % 365) / 30);
      return months > 0 ? `${years}y ${months}m` : `${years} years`;
    }
  }

  function showChildModal(childId: string, childName: string) {
    selectedChildId = childId;
    const modal = document.getElementById('child-modal') as HTMLElement;
    const modalTitle = document.getElementById('modal-child-name') as HTMLElement;
    
    if (modal && modalTitle) {
      modalTitle.textContent = `Actions for ${childName}`;
      modal.classList.add('modal-open');
    }
  }

  function closeChildModal() {
    selectedChildId = '';
    const modal = document.getElementById('child-modal') as HTMLElement;
    if (modal) {
      modal.classList.remove('modal-open');
    }
  }

  function addMeasurementForChild(childId: string) {
    localStorage.setItem('kido-selected-child', childId);
    window.location.href = '/add-measurement';
  }

  function viewGrowthChart(childId: string) {
    localStorage.setItem('kido-selected-child', childId);
    window.location.href = '/growth-chart';
  }

  function showDeleteModal(childId: string, _childName: string) {
    childToDelete = childId;
    const modal = document.getElementById('delete-modal') as HTMLElement;
    if (modal) {
      modal.classList.add('modal-open');
    }
  }

  function closeDeleteModal() {
    childToDelete = '';
    const modal = document.getElementById('delete-modal') as HTMLElement;
    if (modal) {
      modal.classList.remove('modal-open');
    }
  }

  function deleteChild(childId: string) {
    const child = children.find(c => c.id === childId);
    if (child) {
      // Remove child
      children = children.filter(c => c.id !== childId);
      localStorage.setItem('kido-children', JSON.stringify(children));
      
      // Remove all measurements for this child
      measurements = measurements.filter(m => m.childName !== child.name);
      localStorage.setItem('kido-measurements', JSON.stringify(measurements));
      
      // Reload the page
      loadChildren();
    }
  }

  // Make functions globally available
  (window as any).showChildModal = showChildModal;
  (window as any).closeChildModal = closeChildModal;
  (window as any).showDeleteModal = showDeleteModal;
  (window as any).closeDeleteModal = closeDeleteModal;
</script>