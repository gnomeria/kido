---
import Layout from '../layouts/Layout.astro';
import ChildrenList from '../components/ChildrenList.astro';
import ChildInfoCard from '../components/ChildInfoCard.astro';
import GrowthChart from '../components/GrowthChart.astro';
import MeasurementsTable from '../components/MeasurementsTable.astro';
---

<Layout title="Dashboard - Kido">
  <div class="min-h-screen bg-base-200">
    <div class="container mx-auto px-4 max-w-7xl">
      <!-- Header -->
      <div class="flex justify-between items-center py-6">
        <div>
          <h1 class="text-3xl font-bold">Growth Dashboard</h1>
          <p class="text-base-content/70">Select a child to view their growth data</p>
        </div>
        <div class="space-x-2">
          <a href="/add-measurement" class="btn btn-primary">Add Measurement</a>
          <a href="/" class="btn btn-outline">‚Üê Home</a>
        </div>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-4 gap-6 pb-8">
        <!-- Left Sidebar: Children List -->
        <div class="lg:col-span-1">
          <ChildrenList />
        </div>

        <!-- Right Content: Selected Child Data & Charts -->
        <div class="lg:col-span-3">
          <!-- No Selection State -->
          <div id="no-selection" class="card bg-base-100 shadow-xl">
            <div class="card-body">
              <div class="hero min-h-96">
                <div class="hero-content text-center">
                  <div class="max-w-md">
                    <div class="text-8xl mb-4">üìä</div>
                    <h3 class="text-2xl font-bold">Select a child</h3>
                    <p class="py-4">Choose a child from the list to view their growth data and charts.</p>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Selected Child Content -->
          <div id="selected-child-content" class="space-y-6 hidden">
            <ChildInfoCard />
            <GrowthChart />
            <MeasurementsTable />
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Make functions globally available for other components
  // import { Chart } from 'chart.js';

  // Types
  interface Child {
    id: string;
    name: string;
    dateOfBirth: string;
    sex: 'male' | 'female';
    notes: string;
    createdAt: string;
  }

  interface Measurement {
    id: string;
    childName: string;
    dateOfBirth: string;
    measurementDate: string;
    sex: string;
    ageInDays: number;
    weight: number | null;
    height: number | null;
    headCircumference: number | null;
    notes: string;
    originalUnits: {
      weight: string;
      height: string;
      headCircumference: string;
    };
    createdAt: string;
  }

  let children: Child[] = [];
  let measurements: Measurement[] = [];
  let selectedChild: Child | null = null;

  document.addEventListener('DOMContentLoaded', function() {
    children = JSON.parse(localStorage.getItem('kido-children') || '[]');
    measurements = JSON.parse(localStorage.getItem('kido-measurements') || '[]');
    loadChildrenList();
    showNoSelection();
  });

  // Refresh data when returning to the page (e.g., after adding measurements)
  window.addEventListener('focus', function() {
    const newChildren = JSON.parse(localStorage.getItem('kido-children') || '[]');
    const newMeasurements = JSON.parse(localStorage.getItem('kido-measurements') || '[]');
    
    // Check if data has changed
    if (JSON.stringify(newChildren) !== JSON.stringify(children) || 
        JSON.stringify(newMeasurements) !== JSON.stringify(measurements)) {
      children = newChildren;
      measurements = newMeasurements;
      loadChildrenList();
      
      // If a child is currently selected, refresh their data
      if (selectedChild) {
        selectChild(selectedChild.id);
      }
    }
  });

  function loadChildrenList() {
    const childrenList = document.getElementById('children-list');
    const noChildrenDiv = document.getElementById('no-children');

    if (!childrenList || !noChildrenDiv) return;

    if (children.length === 0) {
      childrenList.innerHTML = '';
      noChildrenDiv.classList.remove('hidden');
      return;
    }

    noChildrenDiv.classList.add('hidden');

    childrenList.innerHTML = children.map(child => {
      const age = calculateAge(child.dateOfBirth);
      const childMeasurements = measurements.filter(m => m.childName === child.name);
      const latestMeasurement = childMeasurements.length > 0 ?
        childMeasurements.sort((a, b) => new Date(b.measurementDate).getTime() - new Date(a.measurementDate).getTime())[0] : null;

      const isSelected = selectedChild && selectedChild.id === child.id;

      return `
        <div class="card bg-base-100 shadow-sm hover:shadow-md transition-shadow cursor-pointer ${isSelected ? 'ring-2 ring-primary' : ''}" onclick="selectChild('${child.id}')">
          <div class="card-body p-4">
            <div class="flex justify-between items-start">
              <div>
                <h4 class="font-semibold text-sm">${child.name}</h4>
                <div class="badge badge-primary badge-md">${child.sex}</div>
              </div>
            </div>
            
            <div class="text-xs text-base-content/70 mt-2">
              <div>Age: ${age}</div>
              <div>Measurements: ${childMeasurements.length}</div>
              ${latestMeasurement ? `<div>Latest: ${new Date(latestMeasurement.measurementDate).toLocaleDateString()}</div>` : '<div>No measurements</div>'}
            </div>
          </div>
        </div>
      `;
    }).join('');
  }

  function selectChild(childId: string) {
    selectedChild = children.find(c => c.id === childId) || null;
    
    if (selectedChild) {
      const childWithMeasurements = {
        ...selectedChild,
        measurements: measurements.filter(m => m.childName === selectedChild?.name)
      };
      const event = new CustomEvent('childChanged', { detail: childWithMeasurements });
      window.dispatchEvent(event);
      showSelectedChildContent();
      loadChildrenList(); // Refresh to show selection
    }
  }

  function showNoSelection() {
    const noSelection = document.getElementById('no-selection');
    const selectedChildContent = document.getElementById('selected-child-content');
    if (noSelection) noSelection.classList.remove('hidden');
    if (selectedChildContent) selectedChildContent.classList.add('hidden');
  }

  function showSelectedChildContent() {
    if (!selectedChild) return;

    const noSelection = document.getElementById('no-selection');
    const selectedChildContent = document.getElementById('selected-child-content');
    if (noSelection) noSelection.classList.add('hidden');
    if (selectedChildContent) selectedChildContent.classList.remove('hidden');

    // Update child info
    const age = calculateAge(selectedChild.dateOfBirth);
    if (selectedChild) {
      const childMeasurements = measurements.filter(m => m.childName === selectedChild?.name);
      const latestMeasurement = childMeasurements.length > 0 ?
        childMeasurements.sort((a, b) => new Date(b.measurementDate).getTime() - new Date(a.measurementDate).getTime())[0] : null;

      // const isSelected = selectedChild.id === child.id;

    const selectedChildName = document.getElementById('selected-child-name');
    if (selectedChildName) selectedChildName.textContent = selectedChild.name;

    const selectedChildInfo = document.getElementById('selected-child-info');
    if (selectedChildInfo) selectedChildInfo.textContent = 
      `${selectedChild.sex} ‚Ä¢ Born: ${new Date(selectedChild.dateOfBirth).toLocaleDateString()}`;

    const selectedChildAge = document.getElementById('selected-child-age');
    if (selectedChildAge) selectedChildAge.textContent = age;

    const selectedChildMeasurements = document.getElementById('selected-child-measurements');
    if (selectedChildMeasurements) selectedChildMeasurements.textContent = childMeasurements.length.toString();
    
    if (latestMeasurement) {
      const selectedChildLatest = document.getElementById('selected-child-latest');
      if (selectedChildLatest) selectedChildLatest.textContent = 
        new Date(latestMeasurement.measurementDate).toLocaleDateString();
    } else {
      const selectedChildLatest = document.getElementById('selected-child-latest');
      if (selectedChildLatest) selectedChildLatest.textContent = 'No data';
    }

    updateSelectedChildMeasurementsTable();
    }
  }

  function updateSelectedChildMeasurementsTable() {
    if (!selectedChild) return;

    const childMeasurements = measurements
      .filter(m => m.childName === selectedChild?.name)
      .sort((a, b) => new Date(b.measurementDate).getTime() - new Date(a.measurementDate).getTime());

    const tableBody = document.getElementById('selected-child-measurements-table');
    const noDataDiv = document.getElementById('no-measurements-data');

    if (!tableBody || !noDataDiv) return;

    if (childMeasurements.length === 0) {
      tableBody.innerHTML = '';
      noDataDiv.classList.remove('hidden');
    } else {
      noDataDiv.classList.add('hidden');
      tableBody.innerHTML = childMeasurements.map((measurement: Measurement) => {
        const measurementDate = new Date(measurement.measurementDate).toLocaleDateString();
        const ageText = getAgeText(measurement.ageInDays);
        
        return `
          <tr>
            <td>${measurementDate}</td>
            <td>${ageText}</td>
            <td>${measurement.weight !== null ? measurement.weight.toFixed(1) + ' kg' : '-'}</td>
            <td>${measurement.height !== null ? measurement.height.toFixed(1) + ' cm' : '-'}</td>
            <td>${measurement.headCircumference !== null ? measurement.headCircumference.toFixed(1) + ' cm' : '-'}</td>
            <td>
              <button class="btn btn-xs btn-error btn-outline" onclick="showDeleteModal('${measurement.id}')">
                Delete
              </button>
            </td>
          </tr>
        `;
      }).join('');
    }
  }

  

  function addMeasurementForSelected() {
    if (selectedChild) {
      localStorage.setItem('kido-selected-child', selectedChild.id);
      window.location.href = '/add-measurement';
    }
  }

  function calculateAge(dateOfBirth: string): string {
    const today = new Date();
    const birth = new Date(dateOfBirth);
    const ageInDays = Math.floor((today.getTime() - birth.getTime()) / (1000 * 60 * 60 * 24));

    if (ageInDays < 30) {
      return `${ageInDays} days`;
    } else if (ageInDays < 365) {
      const months = Math.floor(ageInDays / 30);
      const remainingDays = ageInDays % 30;
      return remainingDays > 0 ? `${months}m ${remainingDays}d` : `${months} months`;
    } else {
      const years = Math.floor(ageInDays / 365);
      const months = Math.floor((ageInDays % 365) / 30);
      return months > 0 ? `${years}y ${months}m` : `${years} years`;
    }
  }

  function getAgeText(ageInDays: number): string {
    if (ageInDays < 30) {
      return `${ageInDays} days`;
    } else if (ageInDays < 365) {
      const months = Math.floor(ageInDays / 30);
      const remainingDays = ageInDays % 30;
      return remainingDays > 0 ? `${months}m ${remainingDays}d` : `${months} months`;
    } else {
      const years = Math.floor(ageInDays / 365);
      const months = Math.floor((ageInDays % 365) / 30);
      return months > 0 ? `${years}y ${months}m` : `${years} years`;
    }
  }

  function showDeleteModal(measurementId: string) {
    const modal = document.getElementById('delete-modal') as HTMLDialogElement;
    if (modal) {
      modal.showModal();
      const deleteButton = modal.querySelector('.btn-error');
      if (deleteButton) {
        deleteButton.addEventListener('click', () => deleteMeasurement(measurementId));
      }
    }
  }

  function deleteMeasurement(measurementId: string) {
    measurements = measurements.filter((m: Measurement) => m.id !== measurementId);
    localStorage.setItem('kido-measurements', JSON.stringify(measurements));
    
    const modal = document.getElementById('delete-modal') as HTMLDialogElement;
    if (modal) {
      modal.close();
    }
    
    if (selectedChild) {
      selectChild(selectedChild.id);
    }
  }

  // Make functions globally available
  (window as any).selectChild = selectChild;
  (window as any).addMeasurementForSelected = addMeasurementForSelected;
  (window as any).showDeleteModal = showDeleteModal;
  (window as any).deleteMeasurement = deleteMeasurement;
</script>