---
import Layout from '../layouts/Layout.astro';
import ChildrenList from '../components/ChildrenList.astro';
import ChildInfoCard from '../components/ChildInfoCard.astro';
import GrowthChart from '../components/GrowthChart.astro';
import MeasurementsTable from '../components/MeasurementsTable.astro';
---

<Layout title="Dashboard - Kido">
  <div class="min-h-screen bg-base-200">
    <div class="container mx-auto px-4 max-w-7xl">
      <!-- Header -->
      <div class="flex justify-between items-center py-6">
        <div>
          <h1 class="text-3xl font-bold">Growth Dashboard</h1>
          <p class="text-base-content/70">Select a child to view their growth data</p>
        </div>
        <div class="space-x-2">
          <a href="/add-measurement" class="btn btn-primary">Add Measurement</a>
          <a href="/" class="btn btn-outline">‚Üê Home</a>
        </div>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-4 gap-6 pb-8">
        <!-- Left Sidebar: Children List -->
        <div class="lg:col-span-1">
          <ChildrenList />
        </div>

        <!-- Right Content: Selected Child Data & Charts -->
        <div class="lg:col-span-3">
          <!-- No Selection State -->
          <div id="no-selection" class="card bg-base-100 shadow-xl">
            <div class="card-body">
              <div class="hero min-h-96">
                <div class="hero-content text-center">
                  <div class="max-w-md">
                    <div class="text-8xl mb-4">üìä</div>
                    <h3 class="text-2xl font-bold">Select a child</h3>
                    <p class="py-4">Choose a child from the list to view their growth data and charts.</p>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Selected Child Content -->
          <div id="selected-child-content" class="space-y-6 hidden">
            <ChildInfoCard />
            <GrowthChart />
            <MeasurementsTable />
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  import {
    Chart,
    CategoryScale,
    LinearScale,
    PointElement,
    LineElement,
    LineController,
    Title,
    Tooltip,
    Legend,
  } from 'chart.js';

  Chart.register(
    CategoryScale,
    LinearScale,
    PointElement,
    LineElement,
    LineController,
    Title,
    Tooltip,
    Legend
  );

  // Types
  interface Child {
    id: string;
    name: string;
    dateOfBirth: string;
    sex: 'male' | 'female';
    notes: string;
    createdAt: string;
  }

  interface Measurement {
    id: string;
    childName: string;
    dateOfBirth: string;
    measurementDate: string;
    sex: string;
    ageInDays: number;
    weight: number;
    height: number;
    headCircumference: number;
    notes: string;
    originalUnits: {
      weight: string;
      height: string;
      headCircumference: string;
    };
    createdAt: string;
  }

  // Load data from localStorage
  let children: Child[] = JSON.parse(localStorage.getItem('kido-children') || '[]');
  let measurements: Measurement[] = JSON.parse(localStorage.getItem('kido-measurements') || '[]');
  let selectedChild: Child | null = null;
  let measurementToDelete = '';
  let currentChart: Chart | null = null;
  let currentChartType = 'weight';

  document.addEventListener('DOMContentLoaded', function() {
    loadDashboard();
    setupEventListeners();
  });

  function setupEventListeners() {
    // Chart type selection is now handled by onclick events on buttons
  }

  function selectChartType(chartType: string) {
    currentChartType = chartType;
    updateChartButtons();
    if (selectedChild) {
      updateChart();
    }
  }

  function updateChartButtons() {
    const chartTypes = ['weight', 'height', 'head', 'weight-height'];
    
    chartTypes.forEach(type => {
      const button = document.getElementById(`chart-btn-${type}`);
      if (button) {
        if (type === currentChartType) {
          button.className = 'btn btn-sm join-item btn-primary';
        } else {
          button.className = 'btn btn-sm join-item btn-outline';
        }
      }
    });
  }

  function loadDashboard() {
    loadChildrenList();
    showNoSelection();
  }

  function loadChildrenList() {
    const childrenList = document.getElementById('children-list')!;
    const noChildrenDiv = document.getElementById('no-children')!;

    if (children.length === 0) {
      childrenList.innerHTML = '';
      noChildrenDiv.classList.remove('hidden');
      return;
    }

    noChildrenDiv.classList.add('hidden');

    childrenList.innerHTML = children.map(child => {
      const age = calculateAge(child.dateOfBirth);
      const childMeasurements = measurements.filter(m => m.childName === child.name);
      const latestMeasurement = childMeasurements.length > 0 ? 
        childMeasurements.sort((a, b) => new Date(b.measurementDate).getTime() - new Date(a.measurementDate).getTime())[0] : null;

      const isSelected = selectedChild?.id === child.id;

      return `
        <div class="card bg-base-100 shadow-sm hover:shadow-md transition-shadow cursor-pointer ${isSelected ? 'ring-2 ring-primary' : ''}" onclick="selectChild('${child.id}')">
          <div class="card-body p-4">
            <div class="flex justify-between items-start">
              <div>
                <h4 class="font-semibold text-sm">${child.name}</h4>
                <div class="badge badge-secondary badge-xs">${child.sex}</div>
              </div>
            </div>
            
            <div class="text-xs text-base-content/70 mt-2">
              <div>Age: ${age}</div>
              <div>Measurements: ${childMeasurements.length}</div>
              ${latestMeasurement ? `<div>Latest: ${new Date(latestMeasurement.measurementDate).toLocaleDateString()}</div>` : '<div>No measurements</div>'}
            </div>
          </div>
        </div>
      `;
    }).join('');
  }

  function selectChild(childId: string) {
    selectedChild = children.find(c => c.id === childId) || null;
    
    if (selectedChild) {
      showSelectedChildContent();
      loadChildrenList(); // Refresh to show selection
    }
  }

  function showNoSelection() {
    document.getElementById('no-selection')!.classList.remove('hidden');
    document.getElementById('selected-child-content')!.classList.add('hidden');
  }

  function showSelectedChildContent() {
    if (!selectedChild) return;

    document.getElementById('no-selection')!.classList.add('hidden');
    document.getElementById('selected-child-content')!.classList.remove('hidden');

    // Update child info
    const age = calculateAge(selectedChild.dateOfBirth);
    const childMeasurements = measurements.filter(m => m.childName === selectedChild!.name);
    const latestMeasurement = childMeasurements.length > 0 ? 
      childMeasurements.sort((a, b) => new Date(b.measurementDate).getTime() - new Date(a.measurementDate).getTime())[0] : null;

    document.getElementById('selected-child-name')!.textContent = selectedChild.name;
    document.getElementById('selected-child-info')!.textContent = 
      `${selectedChild.sex} ‚Ä¢ Born: ${new Date(selectedChild.dateOfBirth).toLocaleDateString()}`;
    document.getElementById('selected-child-age')!.textContent = age;
    document.getElementById('selected-child-measurements')!.textContent = childMeasurements.length.toString();
    
    if (latestMeasurement) {
      document.getElementById('selected-child-latest')!.textContent = 
        new Date(latestMeasurement.measurementDate).toLocaleDateString();
    } else {
      document.getElementById('selected-child-latest')!.textContent = 'No data';
    }

    // Update chart and measurements table
    updateChartButtons();
    updateChart();
    updateSelectedChildMeasurementsTable();
  }

  function updateChart() {
    if (!selectedChild) return;

    const childMeasurements = measurements.filter(m => m.childName === selectedChild!.name);

    if (childMeasurements.length === 0) {
      showNoChartData();
      return;
    }

    hideNoChartData();
    createChart(childMeasurements, currentChartType);
  }

  function createChart(childMeasurements: Measurement[], chartType: string) {
    const ctx = document.getElementById('growth-chart') as HTMLCanvasElement;
    
    if (!ctx) {
      console.error('Canvas element not found');
      return;
    }

    // Destroy existing chart completely
    if (currentChart) {
      currentChart.destroy();
      currentChart = null;
    }
    
    // Clear any existing Chart instances on this canvas
    Chart.getChart(ctx)?.destroy();

    // Sort measurements by age
    const sortedMeasurements = childMeasurements.sort((a, b) => a.ageInDays - b.ageInDays);

    // Prepare data based on chart type
    let yData: number[] = [];
    let yLabel = '';
    let title = '';

    switch (chartType) {
      case 'weight':
        yData = sortedMeasurements.map(m => m.weight);
        yLabel = 'Weight (kg)';
        title = `Weight for Age - ${selectedChild!.name}`;
        break;
      case 'height':
        yData = sortedMeasurements.map(m => m.height);
        yLabel = 'Height (cm)';
        title = `Height for Age - ${selectedChild!.name}`;
        break;
      case 'head':
        yData = sortedMeasurements.map(m => m.headCircumference);
        yLabel = 'Head Circumference (cm)';
        title = `Head Circumference for Age - ${selectedChild!.name}`;
        break;
      case 'weight-height':
        yData = sortedMeasurements.map(m => m.weight);
        yLabel = 'Weight (kg)';
        title = `Weight for Height - ${selectedChild!.name}`;
        break;
    }

    // Convert age to months for x-axis (except weight-for-height)
    const xData = chartType === 'weight-height' 
      ? sortedMeasurements.map(m => m.height)
      : sortedMeasurements.map(m => Math.round(m.ageInDays / 30.44));

    const xLabel = chartType === 'weight-height' ? 'Height (cm)' : 'Age (months)';

    // Create age range for WHO percentiles (0 to max age + buffer)
    const maxAge = chartType === 'weight-height' 
      ? Math.max(...xData) + 10 
      : Math.max(...xData, 24); // At least 24 months
    
    const ageRange = chartType === 'weight-height'
      ? Array.from({length: Math.ceil(maxAge/5)}, (_, i) => 50 + i * 5) // Height range 50-100cm
      : Array.from({length: maxAge + 1}, (_, i) => i); // Age range 0-maxAge months

    // Create WHO percentile lines
    const whoPercentiles = generateWHOPercentiles(chartType, selectedChild!.sex, ageRange);

    const datasets = [
      // Child's measurements
      {
        label: `${selectedChild!.name}'s measurements`,
        data: xData.map((x, i) => ({ x, y: yData[i] })),
        borderColor: 'rgb(59, 130, 246)',
        backgroundColor: 'rgba(59, 130, 246, 0.5)',
        pointRadius: 6,
        pointHoverRadius: 8,
        tension: 0.2,
      },
      // WHO percentile lines
      ...whoPercentiles
    ];

    try {
      currentChart = new Chart(ctx, {
        type: 'line',
        data: { datasets },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            title: {
              display: true,
              text: title,
            },
            legend: {
              display: true,
              position: 'top',
            },
          },
          scales: {
            x: {
              type: 'linear',
              display: true,
              title: {
                display: true,
                text: xLabel,
              },
              ticks: {
                stepSize: chartType === 'weight-height' ? 5 : 3,
                callback: function(value) {
                  return chartType === 'weight-height' ? value + ' cm' : value + ' mo';
                }
              },
              min: chartType === 'weight-height' ? 50 : 0,
            },
            y: {
              display: true,
              title: {
                display: true,
                text: yLabel,
              },
              ticks: {
                stepSize: chartType === 'weight' ? 0.5 : chartType === 'height' ? 2 : 0.5,
              }
            },
          },
        },
      });
      console.log('Chart created successfully:', currentChart);
    } catch (error) {
      console.error('Error creating chart:', error);
    }
  }

  function generateWHOPercentiles(chartType: string, sex: string, xData: number[]) {
    const percentiles = [3, 15, 50, 85, 97];
    const colors = [
      'rgba(239, 68, 68, 0.8)',    // Red for 3rd
      'rgba(245, 158, 11, 0.8)',   // Orange for 15th
      'rgba(34, 197, 94, 0.9)',    // Green for 50th (median)
      'rgba(245, 158, 11, 0.8)',   // Orange for 85th
      'rgba(239, 68, 68, 0.8)',    // Red for 97th
    ];

    return percentiles.map((percentile, index) => {
      const yData = xData.map(x => {
        let value = 0;

        switch (chartType) {
          case 'weight':
            // Improved weight-for-age approximation
            const birthWeight = sex === 'male' ? 3.3 : 3.2;
            const ageMonths = x;
            if (ageMonths <= 12) {
              // Rapid growth first year
              value = birthWeight + (ageMonths * 0.65);
            } else {
              // Slower growth after first year
              value = birthWeight + (12 * 0.65) + ((ageMonths - 12) * 0.25);
            }
            break;
            
          case 'height':
            // Improved height-for-age approximation
            const birthHeight = sex === 'male' ? 50 : 49.5;
            const months = x;
            if (months <= 12) {
              // Rapid growth first year (about 25cm)
              value = birthHeight + (months * 2.1);
            } else {
              // Slower growth after first year
              value = birthHeight + (12 * 2.1) + ((months - 12) * 1.0);
            }
            break;
            
          case 'head':
            // Head circumference approximation
            const birthHead = sex === 'male' ? 35 : 34.5;
            const headMonths = x;
            if (headMonths <= 6) {
              value = birthHead + (headMonths * 0.8);
            } else {
              value = birthHead + (6 * 0.8) + ((headMonths - 6) * 0.3);
            }
            break;
            
          case 'weight-height':
            // Weight-for-height approximation
            const heightCm = x;
            value = (heightCm - 45) * 0.25 + 2.5;
            break;
        }

        // Apply percentile multipliers
        const multipliers = [0.82, 0.91, 1.0, 1.09, 1.18]; // More realistic spread
        return Math.max(0, value * multipliers[index]);
      });

      return {
        label: `P${percentile}${percentile === 50 ? ' (median)' : ''}`,
        data: xData.map((x, i) => ({ x, y: yData[i] })),
        borderColor: colors[index],
        backgroundColor: 'transparent',
        pointRadius: 0,
        tension: 0.3,
        borderWidth: percentile === 50 ? 3 : 2,
        borderDash: percentile === 50 ? [] : [3, 3],
        fill: false,
      };
    });
  }

  function showNoChartData() {
    document.getElementById('chart-container')!.style.display = 'none';
    document.getElementById('no-chart-data')!.classList.remove('hidden');
  }

  function hideNoChartData() {
    document.getElementById('chart-container')!.style.display = 'block';
    document.getElementById('no-chart-data')!.classList.add('hidden');
  }

  function updateSelectedChildMeasurementsTable() {
    if (!selectedChild) return;

    const childMeasurements = measurements
      .filter(m => m.childName === selectedChild!.name)
      .sort((a, b) => new Date(b.measurementDate).getTime() - new Date(a.measurementDate).getTime());

    const tableBody = document.getElementById('selected-child-measurements-table')!;
    const noDataDiv = document.getElementById('no-measurements-data')!;

    if (childMeasurements.length === 0) {
      tableBody.innerHTML = '';
      noDataDiv.classList.remove('hidden');
    } else {
      noDataDiv.classList.add('hidden');
      tableBody.innerHTML = childMeasurements.map((measurement: Measurement) => {
        const measurementDate = new Date(measurement.measurementDate).toLocaleDateString();
        const ageText = getAgeText(measurement.ageInDays);
        
        return `
          <tr>
            <td>${measurementDate}</td>
            <td>${ageText}</td>
            <td>${measurement.weight.toFixed(1)} kg</td>
            <td>${measurement.height.toFixed(1)} cm</td>
            <td>${measurement.headCircumference.toFixed(1)} cm</td>
            <td>
              <button class="btn btn-xs btn-error btn-outline" onclick="showDeleteModal('${measurement.id}')">
                Delete
              </button>
            </td>
          </tr>
        `;
      }).join('');
    }
  }

  function calculateAge(dateOfBirth: string): string {
    const today = new Date();
    const birth = new Date(dateOfBirth);
    const ageInDays = Math.floor((today.getTime() - birth.getTime()) / (1000 * 60 * 60 * 24));

    if (ageInDays < 30) {
      return `${ageInDays} days`;
    } else if (ageInDays < 365) {
      const months = Math.floor(ageInDays / 30);
      const remainingDays = ageInDays % 30;
      return remainingDays > 0 ? `${months}m ${remainingDays}d` : `${months} months`;
    } else {
      const years = Math.floor(ageInDays / 365);
      const months = Math.floor((ageInDays % 365) / 30);
      return months > 0 ? `${years}y ${months}m` : `${years} years`;
    }
  }

  function getAgeText(ageInDays: number): string {
    if (ageInDays < 30) {
      return `${ageInDays} days`;
    } else if (ageInDays < 365) {
      const months = Math.floor(ageInDays / 30);
      const remainingDays = ageInDays % 30;
      return remainingDays > 0 ? `${months}m ${remainingDays}d` : `${months} months`;
    } else {
      const years = Math.floor(ageInDays / 365);
      const months = Math.floor((ageInDays % 365) / 30);
      return months > 0 ? `${years}y ${months}m` : `${years} years`;
    }
  }

  function saveNewChild() {
    const form = document.getElementById('add-child-form') as HTMLFormElement;
    const formData = new FormData(form);
    
    const newChild: Child = {
      id: Date.now().toString(),
      name: formData.get('name') as string,
      dateOfBirth: formData.get('dateOfBirth') as string,
      sex: formData.get('sex') as 'male' | 'female',
      notes: formData.get('notes') as string,
      createdAt: new Date().toISOString()
    };
    
    children.push(newChild);
    localStorage.setItem('kido-children', JSON.stringify(children));
    
    // Close modal using DaisyUI method
    (document.getElementById('add-child-modal') as HTMLDialogElement).close();
    
    // Clear form
    form.reset();
    
    loadChildrenList();
  }

  function addMeasurementForSelected() {
    if (selectedChild) {
      localStorage.setItem('kido-selected-child', selectedChild.id);
      window.location.href = '/add-measurement';
    }
  }

  function showDeleteModal(measurementId: string) {
    measurementToDelete = measurementId;
    (document.getElementById('delete-modal') as HTMLDialogElement).showModal();
  }

  function deleteMeasurementAndClose() {
    measurements = measurements.filter((m: Measurement) => m.id !== measurementToDelete);
    localStorage.setItem('kido-measurements', JSON.stringify(measurements));
    
    // Close modal using DaisyUI method
    (document.getElementById('delete-modal') as HTMLDialogElement).close();
    
    // Clear the measurement ID
    measurementToDelete = '';
    
    if (selectedChild) {
      showSelectedChildContent(); // Refresh the selected child view
    }
  }

  // Make functions globally available
  (window as any).selectChild = selectChild;
  (window as any).selectChartType = selectChartType;
  (window as any).saveNewChild = saveNewChild;
  (window as any).addMeasurementForSelected = addMeasurementForSelected;
  (window as any).showDeleteModal = showDeleteModal;
  (window as any).deleteMeasurementAndClose = deleteMeasurementAndClose;
</script>
