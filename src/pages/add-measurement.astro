---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Add Measurement - Kido">
  <div class="min-h-screen bg-base-200 py-8">
    <div class="container mx-auto px-4 max-w-lg">
      <div class="card bg-base-100 shadow-xl">
        <div class="card-body">
          <h2 class="card-title text-2xl mb-6">Add New Measurement</h2>
          
          <form id="measurement-form" class="space-y-4">
            <!-- Child Selection -->
            <div class="form-control">
              <label class="label">
                <span class="label-text">Select Child</span>
              </label>
              <select id="child-select" name="childId" class="select select-bordered w-full" required>
                <option disabled selected>Choose a child</option>
              </select>
              <label class="label">
                <span class="label-text-alt">
                  <a href="/add-child" class="link link-primary">Add a new child</a>
                </span>
              </label>
            </div>

            <!-- Selected Child Info (Display Only) -->
            <div id="child-info" class="alert alert-info hidden">
              <div>
                <div class="font-bold" id="child-name-display"></div>
                <div class="text-sm" id="child-details-display"></div>
              </div>
            </div>

            <!-- Date of Measurement -->
            <div class="form-control">
              <label class="label">
                <span class="label-text">Date of Measurement</span>
              </label>
              <input 
                type="date" 
                name="measurementDate" 
                class="input input-bordered w-full" 
                required 
              />
            </div>

            <!-- Weight -->
            <div class="form-control">
              <label class="label">
                <span class="label-text">Weight (grams) <span class="text-base-content/60">(optional)</span></span>
              </label>
              <input 
                type="number" 
                name="weight" 
                placeholder="e.g., 3450" 
                step="1" 
                min="0" 
                class="input input-bordered w-full" 
              />
            </div>

            <!-- Height/Length -->
            <div class="form-control">
              <label class="label">
                <span class="label-text">Height/Length (cm) <span class="text-base-content/60">(optional)</span></span>
              </label>
              <input 
                type="number" 
                name="height" 
                placeholder="0.0" 
                step="0.1" 
                min="0" 
                class="input input-bordered w-full" 
              />
            </div>

            <!-- Head Circumference -->
            <div class="form-control">
              <label class="label">
                <span class="label-text">Head Circumference (cm) <span class="text-base-content/60">(optional)</span></span>
              </label>
              <input 
                type="number" 
                name="headCircumference" 
                placeholder="0.0" 
                step="0.1" 
                min="0" 
                class="input input-bordered w-full" 
              />
            </div>

            <!-- Validation Alert -->
            <div id="validation-alert" class="alert alert-error hidden">
              <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <span id="validation-message">Please provide at least one measurement (weight, height, or head circumference).</span>
            </div>

            <!-- Notes -->
            <div class="form-control">
              <label class="label">
                <span class="label-text">Notes (optional)</span>
              </label>
              <textarea 
                name="notes" 
                placeholder="Add any additional notes..." 
                class="textarea textarea-bordered w-full"
                rows="3"
              ></textarea>
            </div>

            <!-- Submit Button -->
            <div class="form-control mt-6">
              <button type="submit" class="btn btn-primary btn-lg w-full">
                Save Measurement
              </button>
            </div>
          </form>
        </div>
      </div>

      <!-- Navigation -->
      <div class="mt-6 text-center">
        <a href="/" class="btn btn-outline">← Back to Home</a>
        <a href="/dashboard" class="btn btn-outline ml-2">View Dashboard</a>
      </div>
    </div>
  </div>

  <!-- Success Modal -->
  <div id="success-modal" class="modal">
    <div class="modal-box">
      <h3 class="font-bold text-lg">Measurement Saved!</h3>
      <p class="py-4">The measurement has been successfully saved.</p>
      <div class="modal-action">
        <button class="btn btn-primary" onclick="closeSuccessModal()">Continue</button>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Types
  interface Child {
    id: string;
    name: string;
    dateOfBirth: string;
    sex: 'male' | 'female';
    notes: string;
    createdAt: string;
  }

  interface Measurement {
    id: string;
    childName: string;
    dateOfBirth: string;
    measurementDate: string;
    sex: string;
    ageInDays: number;
    weight: number | null;
    height: number | null;
    headCircumference: number | null;
    notes: string;
    originalUnits: {
      weight: string;
      height: string;
      headCircumference: string;
    };
    createdAt: string;
  }

  // In-memory storage for data
  let children: Child[] = [];

  document.addEventListener('DOMContentLoaded', async function() {
    // Set today's date as default
    const today = new Date().toISOString().split('T')[0];
    const measurementDateInput = document.querySelector('input[name="measurementDate"]') as HTMLInputElement;
    if (measurementDateInput) {
      measurementDateInput.value = today;
    }

    // Load children from API
    await loadChildren();

    // Handle child selection
    const childSelect = document.getElementById('child-select') as HTMLSelectElement;
    if (childSelect) {
      childSelect.addEventListener('change', handleChildSelection);
    }

    // Form submission handler
    const form = document.getElementById('measurement-form') as HTMLFormElement;
    if (form) {
      form.addEventListener('submit', handleFormSubmit);
    }

    // Check if a child was pre-selected (from children page)
    const selectedChildId = localStorage.getItem('kido-selected-child');
    if (selectedChildId && children.length > 0) {
      childSelect.value = selectedChildId;
      handleChildSelection();
      localStorage.removeItem('kido-selected-child'); // Clean up
    }
  });

  async function loadChildren() {
    const childSelect = document.getElementById('child-select') as HTMLSelectElement;
    
    try {
      const response = await fetch('/api/children');
      if (!response.ok) {
        throw new Error('Failed to fetch children');
      }
      children = await response.json();
      
      // Clear existing options (except the first one)
      while (childSelect.children.length > 1) {
        childSelect.removeChild(childSelect.lastChild!);
      }

      // Check if there are no children
      if (children.length === 0) {
        const noChildrenOption = document.createElement('option');
        noChildrenOption.disabled = true;
        noChildrenOption.textContent = 'No children added yet';
        childSelect.appendChild(noChildrenOption);
        return;
      }

      // Add children options
      children.forEach((child: Child) => {
        const option = document.createElement('option');
        option.value = child.id;
        option.textContent = child.name;
        childSelect.appendChild(option);
      });
    } catch (error) {
      console.error('Error loading children:', error);
      const noChildrenOption = document.createElement('option');
      noChildrenOption.disabled = true;
      noChildrenOption.textContent = 'Error loading children';
      childSelect.appendChild(noChildrenOption);
    }
  }

  function handleChildSelection() {
    const childSelect = document.getElementById('child-select') as HTMLSelectElement;
    const childInfo = document.getElementById('child-info') as HTMLElement;
    const childNameDisplay = document.getElementById('child-name-display') as HTMLElement;
    const childDetailsDisplay = document.getElementById('child-details-display') as HTMLElement;

    const selectedChildId = childSelect.value;
    if (!selectedChildId) {
      childInfo.classList.add('hidden');
      return;
    }

    const selectedChild = children.find(c => c.id === selectedChildId);
    if (selectedChild) {
      const age = calculateAge(selectedChild.dateOfBirth);
      childNameDisplay.textContent = selectedChild.name;
      childDetailsDisplay.textContent = `${selectedChild.sex} • Born: ${new Date(selectedChild.dateOfBirth).toLocaleDateString()} • Age: ${age}`;
      childInfo.classList.remove('hidden');
    }
  }

  function calculateAge(dateOfBirth: string): string {
    const today = new Date();
    const birth = new Date(dateOfBirth);
    const ageInDays = Math.floor((today.getTime() - birth.getTime()) / (1000 * 60 * 60 * 24));

    if (ageInDays < 30) {
      return `${ageInDays} days`;
    } else if (ageInDays < 365) {
      const months = Math.floor(ageInDays / 30);
      const remainingDays = ageInDays % 30;
      return remainingDays > 0 ? `${months}m ${remainingDays}d` : `${months} months`;
    } else {
      const years = Math.floor(ageInDays / 365);
      const months = Math.floor((ageInDays % 365) / 30);
      return months > 0 ? `${years}y ${months}m` : `${years} years`;
    }
  }

  async function handleFormSubmit(event: Event) {
    event.preventDefault();
    
    const form = event.target as HTMLFormElement;
    const formData = new FormData(form);
    
    // Hide validation alert initially
    hideValidationAlert();
    
    const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
    if (submitButton) {
      submitButton.disabled = true;
      submitButton.textContent = 'Saving...';
    }

    try {
      // Parse measurement values (they can be empty/null)
      const weightValue = formData.get('weight') as string;
      const heightValue = formData.get('height') as string;
      const headCircumferenceValue = formData.get('headCircumference') as string;
      
      const weight = weightValue && !isNaN(parseFloat(weightValue)) ? parseFloat(weightValue) / 1000 : null; // Convert grams to kg
      const height = heightValue && !isNaN(parseFloat(heightValue)) ? parseFloat(heightValue) : null;
      const headCircumference = headCircumferenceValue && !isNaN(parseFloat(headCircumferenceValue)) ? parseFloat(headCircumferenceValue) : null;
      
      // Validate that at least one measurement is provided
      if (weight === null && height === null && headCircumference === null) {
        showValidationAlert('Please provide at least one measurement (weight, height, or head circumference).');
        return;
      }
      
      // Get selected child
      const selectedChild = children.find(c => c.id === formData.get('childId'));
      if (!selectedChild) {
        showValidationAlert('Please select a child first.');
        return;
      }

      // Calculate age in days
      const formMeasurementDate = new Date(formData.get('measurementDate') as string);
      const childDateOfBirth = new Date(selectedChild.dateOfBirth);
      const childAgeInDays = Math.floor((formMeasurementDate.getTime() - childDateOfBirth.getTime()) / (1000 * 60 * 60 * 24));

      // Create measurement object
      const measurement = {
        id: Date.now().toString(),
        childId: selectedChild.id,
        measurementDate: formData.get('measurementDate') as string,
        ageInDays: childAgeInDays,
        weight: weight, // Always stored in kg (can be null)
        height: height, // Always stored in cm (can be null)
        headCircumference: headCircumference, // Always stored in cm (can be null)
        notes: formData.get('notes') as string
      };
      
      // Save to database via API
      const response = await fetch('/api/measurements', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(measurement)
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || 'Failed to save measurement');
      }
      
      // Show success modal
      showSuccessModal();
      
      // Reset form
      form.reset();
      
      // Set today's date again
      const today = new Date().toISOString().split('T')[0];
      const measurementDateInput = document.querySelector('input[name="measurementDate"]') as HTMLInputElement;
      if (measurementDateInput) {
        measurementDateInput.value = today;
      }
    } catch (error) {
      console.error('Error saving measurement:', error);
      showValidationAlert(error instanceof Error ? error.message : 'Failed to save measurement. Please try again.');
    } finally {
      if (submitButton) {
        submitButton.disabled = false;
        submitButton.textContent = 'Save Measurement';
      }
    }
  }

  function showSuccessModal() {
    const modal = document.getElementById('success-modal') as HTMLElement;
    if (modal) {
      modal.classList.add('modal-open');
    }
  }

  function closeSuccessModal() {
    const modal = document.getElementById('success-modal') as HTMLElement;
    if (modal) {
      modal.classList.remove('modal-open');
    }
  }

  function showValidationAlert(message: string) {
    const alert = document.getElementById('validation-alert') as HTMLElement;
    const messageElement = document.getElementById('validation-message') as HTMLElement;
    if (alert && messageElement) {
      messageElement.textContent = message;
      alert.classList.remove('hidden');
      // Scroll to the alert
      alert.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
  }

  function hideValidationAlert() {
    const alert = document.getElementById('validation-alert') as HTMLElement;
    if (alert) {
      alert.classList.add('hidden');
    }
  }

  // Make functions globally available
  (window as any).closeSuccessModal = closeSuccessModal;
</script>