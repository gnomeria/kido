---
// No props needed - will get data from localStorage
---

<div class="card bg-base-100 shadow-xl">
  <div class="card-body">
    <div class="flex justify-between items-center mb-4">
      <h2 class="card-title">Children</h2>
      <button class="btn btn-primary btn-sm" onclick="showAddChildModal()">+ Add</button>
    </div>
    
    <!-- Children List -->
    <div id="children-list" class="space-y-2">
      <!-- Children will be populated here -->
    </div>

    <!-- No Children State -->
    <div id="no-children" class="text-center py-8 hidden">
      <div class="text-4xl mb-2">ðŸ‘¶</div>
      <p class="text-sm text-base-content/70 mb-4">No children added yet</p>
      <button class="btn btn-primary btn-sm" onclick="showAddChildModal()">Add First Child</button>
    </div>
  </div>
</div>

<!-- Add Child Modal -->
<dialog id="add-child-modal" class="modal">
  <div class="modal-box">
    <h3 class="font-bold text-lg">Add New Child</h3>
    <form id="add-child-form" class="py-4 space-y-4">
      <div class="form-control">
        <label class="label">
          <span class="label-text">Child's Name</span>
        </label>
        <input type="text" name="name" class="input input-bordered" required />
      </div>
      
      <div class="form-control">
        <label class="label">
          <span class="label-text">Date of Birth</span>
        </label>
        <input type="date" name="dateOfBirth" class="input input-bordered" required />
      </div>
      
      <div class="form-control">
        <label class="label">
          <span class="label-text">Sex</span>
        </label>
        <select name="sex" class="select select-bordered" required>
          <option disabled selected>Choose sex</option>
          <option value="male">Male</option>
          <option value="female">Female</option>
        </select>
      </div>
      
      <div class="form-control">
        <label class="label">
          <span class="label-text">Notes (optional)</span>
        </label>
        <textarea name="notes" class="textarea textarea-bordered" rows="2"></textarea>
      </div>
    </form>
    
    <div class="modal-action">
      <form method="dialog">
        <button class="btn btn-outline">Cancel</button>
      </form>
      <button class="btn btn-primary" onclick="saveNewChild()">Save Child</button>
    </div>
  </div>
  <form method="dialog" class="modal-backdrop">
    <button>close</button>
  </form>
</dialog>

<script>
  // Types
  interface Child {
    id: string;
    name: string;
    dateOfBirth: string;
    sex: 'male' | 'female';
    notes: string;
    createdAt: string;
  }

  // Load existing data
  let children: Child[] = JSON.parse(localStorage.getItem('kido-children') || '[]');

  document.addEventListener('DOMContentLoaded', function() {
    loadChildrenList();
  });

  // Listen for data changes and refresh
  window.addEventListener('focus', function() {
    const newChildren = JSON.parse(localStorage.getItem('kido-children') || '[]');
    if (JSON.stringify(newChildren) !== JSON.stringify(children)) {
      children = newChildren;
      loadChildrenList();
    }
  });

  // Listen for child list refresh requests
  window.addEventListener('refreshChildrenList', function() {
    children = JSON.parse(localStorage.getItem('kido-children') || '[]');
    loadChildrenList();
  });

  function loadChildrenList() {
    const childrenList = document.getElementById('children-list');
    const noChildrenDiv = document.getElementById('no-children');

    if (!childrenList || !noChildrenDiv) return;

    if (children.length === 0) {
      childrenList.innerHTML = '';
      noChildrenDiv.classList.remove('hidden');
      return;
    }

    noChildrenDiv.classList.add('hidden');

    childrenList.innerHTML = children.map(child => {
      const age = calculateAge(child.dateOfBirth);
      
      return `
        <div class="card bg-base-100 shadow-sm hover:shadow-md transition-shadow cursor-pointer" onclick="selectChild('${child.id}')">
          <div class="card-body p-4">
            <div class="flex justify-between items-start">
              <div>
                <h4 class="font-semibold text-sm">${child.name}</h4>
                <div class="badge badge-primary badge-xs">${child.sex}</div>
              </div>
            </div>
            
            <div class="text-xs text-base-content/70 mt-2">
              <div>Age: ${age}</div>
              <div>Born: ${new Date(child.dateOfBirth).toLocaleDateString()}</div>
            </div>
          </div>
        </div>
      `;
    }).join('');
  }

  function calculateAge(dateOfBirth: string): string {
    const today = new Date();
    const birth = new Date(dateOfBirth);
    const ageInDays = Math.floor((today.getTime() - birth.getTime()) / (1000 * 60 * 60 * 24));

    if (ageInDays < 30) {
      return `${ageInDays} days`;
    } else if (ageInDays < 365) {
      const months = Math.floor(ageInDays / 30);
      const remainingDays = ageInDays % 30;
      return remainingDays > 0 ? `${months}m ${remainingDays}d` : `${months} months`;
    } else {
      const years = Math.floor(ageInDays / 365);
      const months = Math.floor((ageInDays % 365) / 30);
      return months > 0 ? `${years}y ${months}m` : `${years} years`;
    }
  }

  function showAddChildModal() {
    const modal = document.getElementById('add-child-modal') as HTMLDialogElement;
    if (modal) {
      modal.showModal();
    }
  }

  function saveNewChild() {
    const form = document.getElementById('add-child-form') as HTMLFormElement;
    const formData = new FormData(form);
    
    // Check if child name already exists
    const name = formData.get('name') as string;
    const existingChild = children.find(child => child.name.toLowerCase() === name.toLowerCase());
    
    if (existingChild) {
      alert('A child with this name already exists. Please use a different name.');
      return;
    }

    // Create child object
    const child: Child = {
      id: Date.now().toString(),
      name: name.trim(),
      dateOfBirth: formData.get('dateOfBirth') as string,
      sex: formData.get('sex') as 'male' | 'female',
      notes: (formData.get('notes') as string).trim(),
      createdAt: new Date().toISOString()
    };
    
    // Save to localStorage
    children.push(child);
    localStorage.setItem('kido-children', JSON.stringify(children));
    
    // Close modal and reset form
    const modal = document.getElementById('add-child-modal') as HTMLDialogElement;
    if (modal) {
      modal.close();
    }
    form.reset();
    
    // Reload the children list
    loadChildrenList();
  }

  function selectChild(childId: string) {
    // This will be handled by the parent dashboard component
    const selectedChild = children.find(c => c.id === childId);
    if (selectedChild) {
      // Trigger the selectChild function from dashboard
      if (typeof (window as any).selectChild === 'function') {
        (window as any).selectChild(childId);
      }
    }
  }

  // Make functions globally available
  (window as any).showAddChildModal = showAddChildModal;
  (window as any).saveNewChild = saveNewChild;
  (window as any).loadChildrenList = loadChildrenList;
</script>
